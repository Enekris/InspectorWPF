// <auto-generated />
using System;
using Inspector.Persistence.DbSettings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Inspector.Persistence.Migrations
{
    [DbContext(typeof(RegistrationOIContext))]
    [Migration("20240902115824_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Inspector.Domains.Entities.CabinetsDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActReportId")
                        .HasColumnType("int")
                        .HasColumnName("Id акта обслед.");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Адрес здания");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Примечание");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Номер");

                    b.Property<string>("Persons")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Список допущенных в кабинет.");

                    b.Property<int?>("RaspExpId")
                        .HasColumnType("int")
                        .HasColumnName("Id Расп. о вводе в экспл.");

                    b.Property<string>("ResponsibleExp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Отв. за экспл.");

                    b.Property<string>("ResponsibleTZI")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Отв. за ТЗИ");

                    b.Property<int?>("SertificateId")
                        .HasColumnType("int")
                        .HasColumnName("Id аттестата");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Тип помещения");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ActReportId");

                    b.HasIndex("RaspExpId");

                    b.HasIndex("SertificateId");

                    b.ToTable("Кабинеты", (string)null);
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsActReportDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("Data")
                        .HasColumnType("datetime2")
                        .HasColumnName("Дата");

                    b.Property<bool>("DestructionMark")
                        .HasColumnType("bit")
                        .HasColumnName("Отметка об уничтожении");

                    b.Property<bool>("ForDestruction")
                        .HasColumnType("bit")
                        .HasColumnName("На уничтожение");

                    b.Property<string>("InvNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Инв. номер");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("Id инвентаря");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Название");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Примечание");

                    b.Property<int?>("Page")
                        .HasColumnType("int")
                        .HasColumnName("Страница");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.Property<int?>("VolumeId")
                        .HasColumnType("int")
                        .HasColumnName("Id тома");

                    b.HasKey("Id");

                    b.HasIndex("InvNumber")
                        .IsUnique();

                    b.HasIndex("InventoryId");

                    b.HasIndex("VolumeId");

                    b.ToTable("Акт обслед.", (string)null);
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsFirstDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("Data")
                        .HasColumnType("datetime2")
                        .HasColumnName("Дата");

                    b.Property<bool>("DestructionMark")
                        .HasColumnType("bit")
                        .HasColumnName("Отметка об уничтожении");

                    b.Property<bool>("ForDestruction")
                        .HasColumnType("bit")
                        .HasColumnName("На уничтожение");

                    b.Property<string>("InvNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Инв. номер");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("Id инвентаря");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Название");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Примечание");

                    b.Property<int?>("Page")
                        .HasColumnType("int")
                        .HasColumnName("Страница");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.Property<int?>("VolumeId")
                        .HasColumnType("int")
                        .HasColumnName("Id тома");

                    b.HasKey("Id");

                    b.HasIndex("InvNumber")
                        .IsUnique();

                    b.HasIndex("InventoryId");

                    b.HasIndex("VolumeId");

                    b.ToTable("Док. Первый", (string)null);
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsOthersDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("Data")
                        .HasColumnType("datetime2")
                        .HasColumnName("Дата");

                    b.Property<bool>("DestructionMark")
                        .HasColumnType("bit")
                        .HasColumnName("Отметка об уничтожении");

                    b.Property<bool>("ForDestruction")
                        .HasColumnType("bit")
                        .HasColumnName("На уничтожение");

                    b.Property<string>("InvNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Инв. номер");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("Id инвентаря");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Название");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Примечание");

                    b.Property<int?>("Page")
                        .HasColumnType("int")
                        .HasColumnName("Страница");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.Property<int?>("VolumeId")
                        .HasColumnType("int")
                        .HasColumnName("Id тома");

                    b.HasKey("Id");

                    b.HasIndex("InvNumber")
                        .IsUnique();

                    b.HasIndex("InventoryId");

                    b.HasIndex("VolumeId");

                    b.ToTable("Док. Прочие", (string)null);
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsRaspOVVDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("Data")
                        .HasColumnType("datetime2")
                        .HasColumnName("Дата");

                    b.Property<bool>("DestructionMark")
                        .HasColumnType("bit")
                        .HasColumnName("Отметка об уничтожении");

                    b.Property<bool>("ForDestruction")
                        .HasColumnType("bit")
                        .HasColumnName("На уничтожение");

                    b.Property<string>("InvNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Инв. номер");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("Id инвентаря");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Название");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Примечание");

                    b.Property<int?>("Page")
                        .HasColumnType("int")
                        .HasColumnName("Страница");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.Property<int?>("VolumeId")
                        .HasColumnType("int")
                        .HasColumnName("Id тома");

                    b.HasKey("Id");

                    b.HasIndex("InvNumber")
                        .IsUnique();

                    b.HasIndex("InventoryId");

                    b.HasIndex("VolumeId");

                    b.ToTable("Расп. о вводе", (string)null);
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsSecondDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("Data")
                        .HasColumnType("datetime2")
                        .HasColumnName("Дата");

                    b.Property<bool>("DestructionMark")
                        .HasColumnType("bit")
                        .HasColumnName("Отметка об уничтожении");

                    b.Property<bool>("ForDestruction")
                        .HasColumnType("bit")
                        .HasColumnName("На уничтожение");

                    b.Property<string>("InvNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Инв. номер");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("Id инвентаря");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Название");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Примечание");

                    b.Property<int?>("Page")
                        .HasColumnType("int")
                        .HasColumnName("Страница");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.Property<int?>("VolumeId")
                        .HasColumnType("int")
                        .HasColumnName("Id тома");

                    b.HasKey("Id");

                    b.HasIndex("InvNumber")
                        .IsUnique();

                    b.HasIndex("InventoryId");

                    b.HasIndex("VolumeId");

                    b.ToTable("Док. Второй", (string)null);
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsThirdDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("Data")
                        .HasColumnType("datetime2")
                        .HasColumnName("Дата");

                    b.Property<bool>("DestructionMark")
                        .HasColumnType("bit")
                        .HasColumnName("Отметка об уничтожении");

                    b.Property<bool>("ForDestruction")
                        .HasColumnType("bit")
                        .HasColumnName("На уничтожение");

                    b.Property<string>("InvNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Инв. номер");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("Id инвентаря");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Название");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Примечание");

                    b.Property<int?>("Page")
                        .HasColumnType("int")
                        .HasColumnName("Страница");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.Property<int?>("VolumeId")
                        .HasColumnType("int")
                        .HasColumnName("Id тома");

                    b.HasKey("Id");

                    b.HasIndex("InvNumber")
                        .IsUnique();

                    b.HasIndex("InventoryId");

                    b.HasIndex("VolumeId");

                    b.ToTable("Док. Третий", (string)null);
                });

            modelBuilder.Entity("Inspector.Domains.Entities.HardwareFilterNameDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Наименование");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Наим. ТС", (string)null);
                });

            modelBuilder.Entity("Inspector.Domains.Entities.HardwaresDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Appointment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Назначение");

                    b.Property<int?>("CabinetId")
                        .HasColumnType("int")
                        .HasColumnName("Id Кабинета");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<int?>("DocLocationFirstId")
                        .HasColumnType("int")
                        .HasColumnName("Id Документа Первый");

                    b.Property<int?>("DocLocationSecondId")
                        .HasColumnType("int")
                        .HasColumnName("Id Документа Второй");

                    b.Property<int?>("DocLocationThirdId")
                        .HasColumnType("int")
                        .HasColumnName("Id Документа Третий.");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Модель");

                    b.Property<int>("NameId")
                        .HasColumnType("int")
                        .HasColumnName("Id Наим. ТС");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Примечание");

                    b.Property<int?>("OvtId")
                        .HasColumnType("int")
                        .HasColumnName("Id ОВТ");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Серийный номер");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.Property<bool>("UsageInfo")
                        .HasColumnType("bit")
                        .HasColumnName("Актуальность");

                    b.HasKey("Id");

                    b.HasIndex("CabinetId");

                    b.HasIndex("DocLocationFirstId");

                    b.HasIndex("DocLocationSecondId");

                    b.HasIndex("DocLocationThirdId");

                    b.HasIndex("NameId");

                    b.HasIndex("OvtId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("Тех.средства", (string)null);
                });

            modelBuilder.Entity("Inspector.Domains.Entities.InvertoriesDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("DestructionMark")
                        .HasColumnType("bit")
                        .HasColumnName("Отметка об уничтожении");

                    b.Property<bool>("ForDestruction")
                        .HasColumnType("bit")
                        .HasColumnName("На уничтожение");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Наименование");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Примечание");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Инв. Номер");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("Инвентари", (string)null);
                });

            modelBuilder.Entity("Inspector.Domains.Entities.OVTsDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminSec")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Админ.Безоп.Инф.");

                    b.Property<string>("AdminSys")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Сис.Админ.");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Наименование");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Примечание");

                    b.Property<int?>("RaspExpId")
                        .HasColumnType("int")
                        .HasColumnName("Id Расп. о вводе в экспл.");

                    b.Property<string>("ResponsibleExp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Отв. за эксплуатацию");

                    b.Property<string>("ResponsibleTZI")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Отв. за ТЗИ");

                    b.Property<int?>("SertificateId")
                        .HasColumnType("int")
                        .HasColumnName("Id аттестата");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("RaspExpId");

                    b.HasIndex("SertificateId")
                        .IsUnique()
                        .HasFilter("[Id аттестата] IS NOT NULL");

                    b.ToTable("ОВТ", (string)null);
                });

            modelBuilder.Entity("Inspector.Domains.Entities.SertificatesDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime>("DataEnd")
                        .HasColumnType("datetime2")
                        .HasColumnName("Срок действия");

                    b.Property<DateTime>("DataFirst")
                        .HasColumnType("datetime2")
                        .HasColumnName("Дата Выдачи");

                    b.Property<bool>("DestructionMark")
                        .HasColumnType("bit")
                        .HasColumnName("Отметка об уничтожении");

                    b.Property<bool>("ForDestruction")
                        .HasColumnType("bit")
                        .HasColumnName("На уничтожение");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("Id инвентаря");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Наименование");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Примечание");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Номер");

                    b.Property<string>("Organisation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Кем выдан");

                    b.Property<int?>("Page")
                        .HasColumnType("int")
                        .HasColumnName("Страница");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.Property<int?>("VolumeId")
                        .HasColumnType("int")
                        .HasColumnName("Id тома");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("VolumeId");

                    b.ToTable("Аттестаты", (string)null);
                });

            modelBuilder.Entity("Inspector.Domains.Entities.VolumesDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CaseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Номер дела");

                    b.Property<string>("CaseYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Год Тома/Дела");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("DestructionMark")
                        .HasColumnType("bit")
                        .HasColumnName("Отметка об уничтожении");

                    b.Property<bool>("ForDestruction")
                        .HasColumnType("bit")
                        .HasColumnName("На уничтожение");

                    b.Property<string>("InvNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Инвент. Номер");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Примечание");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UpdatedBy");

                    b.Property<int>("VolumeNumber")
                        .HasColumnType("int")
                        .HasColumnName("Номер Тома");

                    b.HasKey("Id");

                    b.ToTable("Тома", (string)null);
                });

            modelBuilder.Entity("Inspector.Domains.Entities.CabinetsDb", b =>
                {
                    b.HasOne("Inspector.Domains.Entities.DocumentsActReportDb", "DocumentActReportDb")
                        .WithMany("CabinetsDb")
                        .HasForeignKey("ActReportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Inspector.Domains.Entities.DocumentsRaspOVVDb", "DocumentRaspOVVDb")
                        .WithMany("CabinetsDb")
                        .HasForeignKey("RaspExpId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Inspector.Domains.Entities.SertificatesDb", "SertificateDb")
                        .WithMany("CabinetsDb")
                        .HasForeignKey("SertificateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DocumentActReportDb");

                    b.Navigation("DocumentRaspOVVDb");

                    b.Navigation("SertificateDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsActReportDb", b =>
                {
                    b.HasOne("Inspector.Domains.Entities.InvertoriesDb", "InventoryDb")
                        .WithMany("DocumentActReportDb")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Inspector.Domains.Entities.VolumesDb", "VolumeDb")
                        .WithMany("DocumentActReportDb")
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InventoryDb");

                    b.Navigation("VolumeDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsFirstDb", b =>
                {
                    b.HasOne("Inspector.Domains.Entities.InvertoriesDb", "InventoryDb")
                        .WithMany("DocumentFirstDb")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Inspector.Domains.Entities.VolumesDb", "VolumeDb")
                        .WithMany("DocumentFirstDb")
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InventoryDb");

                    b.Navigation("VolumeDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsOthersDb", b =>
                {
                    b.HasOne("Inspector.Domains.Entities.InvertoriesDb", "InventoryDb")
                        .WithMany("DocumentsOthersDb")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Inspector.Domains.Entities.VolumesDb", "VolumeDb")
                        .WithMany("DocumentsOthersDb")
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InventoryDb");

                    b.Navigation("VolumeDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsRaspOVVDb", b =>
                {
                    b.HasOne("Inspector.Domains.Entities.InvertoriesDb", "InventoryDb")
                        .WithMany("DocumentRaspOVVDb")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Inspector.Domains.Entities.VolumesDb", "VolumeDb")
                        .WithMany("DocumentRaspOVVDb")
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InventoryDb");

                    b.Navigation("VolumeDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsSecondDb", b =>
                {
                    b.HasOne("Inspector.Domains.Entities.InvertoriesDb", "InventoryDb")
                        .WithMany("DocumentSecondDb")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Inspector.Domains.Entities.VolumesDb", "VolumeDb")
                        .WithMany("DocumentSecondDb")
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InventoryDb");

                    b.Navigation("VolumeDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsThirdDb", b =>
                {
                    b.HasOne("Inspector.Domains.Entities.InvertoriesDb", "InventoryDb")
                        .WithMany("DocumentThirdDb")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Inspector.Domains.Entities.VolumesDb", "VolumeDb")
                        .WithMany("DocumentThirdDb")
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InventoryDb");

                    b.Navigation("VolumeDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.HardwaresDb", b =>
                {
                    b.HasOne("Inspector.Domains.Entities.CabinetsDb", "CabinetDb")
                        .WithMany("HardwaresDb")
                        .HasForeignKey("CabinetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Inspector.Domains.Entities.DocumentsFirstDb", "DocumentFirstDb")
                        .WithMany("HardwaresDb")
                        .HasForeignKey("DocLocationFirstId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Inspector.Domains.Entities.DocumentsSecondDb", "DocumentSecondDb")
                        .WithMany("HardwaresDb")
                        .HasForeignKey("DocLocationSecondId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Inspector.Domains.Entities.DocumentsThirdDb", "DocumentThirdDb")
                        .WithMany("HardwaresDb")
                        .HasForeignKey("DocLocationThirdId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Inspector.Domains.Entities.HardwareFilterNameDb", "FilterDb")
                        .WithMany("HardwaresDb")
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Inspector.Domains.Entities.OVTsDb", "OVTDb")
                        .WithMany("HardwaresDb")
                        .HasForeignKey("OvtId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CabinetDb");

                    b.Navigation("DocumentFirstDb");

                    b.Navigation("DocumentSecondDb");

                    b.Navigation("DocumentThirdDb");

                    b.Navigation("FilterDb");

                    b.Navigation("OVTDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.OVTsDb", b =>
                {
                    b.HasOne("Inspector.Domains.Entities.DocumentsRaspOVVDb", "DocumentRaspOVVDb")
                        .WithMany("OVTsDb")
                        .HasForeignKey("RaspExpId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Inspector.Domains.Entities.SertificatesDb", "SertificateDb")
                        .WithOne("OVTDb")
                        .HasForeignKey("Inspector.Domains.Entities.OVTsDb", "SertificateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DocumentRaspOVVDb");

                    b.Navigation("SertificateDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.SertificatesDb", b =>
                {
                    b.HasOne("Inspector.Domains.Entities.InvertoriesDb", "InventoryDb")
                        .WithMany("SertificatesDb")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Inspector.Domains.Entities.VolumesDb", "VolumeDb")
                        .WithMany("SertificatesDb")
                        .HasForeignKey("VolumeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InventoryDb");

                    b.Navigation("VolumeDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.CabinetsDb", b =>
                {
                    b.Navigation("HardwaresDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsActReportDb", b =>
                {
                    b.Navigation("CabinetsDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsFirstDb", b =>
                {
                    b.Navigation("HardwaresDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsRaspOVVDb", b =>
                {
                    b.Navigation("CabinetsDb");

                    b.Navigation("OVTsDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsSecondDb", b =>
                {
                    b.Navigation("HardwaresDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.DocumentsThirdDb", b =>
                {
                    b.Navigation("HardwaresDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.HardwareFilterNameDb", b =>
                {
                    b.Navigation("HardwaresDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.InvertoriesDb", b =>
                {
                    b.Navigation("DocumentActReportDb");

                    b.Navigation("DocumentFirstDb");

                    b.Navigation("DocumentRaspOVVDb");

                    b.Navigation("DocumentSecondDb");

                    b.Navigation("DocumentThirdDb");

                    b.Navigation("DocumentsOthersDb");

                    b.Navigation("SertificatesDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.OVTsDb", b =>
                {
                    b.Navigation("HardwaresDb");
                });

            modelBuilder.Entity("Inspector.Domains.Entities.SertificatesDb", b =>
                {
                    b.Navigation("CabinetsDb");

                    b.Navigation("OVTDb")
                        .IsRequired();
                });

            modelBuilder.Entity("Inspector.Domains.Entities.VolumesDb", b =>
                {
                    b.Navigation("DocumentActReportDb");

                    b.Navigation("DocumentFirstDb");

                    b.Navigation("DocumentRaspOVVDb");

                    b.Navigation("DocumentSecondDb");

                    b.Navigation("DocumentThirdDb");

                    b.Navigation("DocumentsOthersDb");

                    b.Navigation("SertificatesDb");
                });
#pragma warning restore 612, 618
        }
    }
}
